apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'


android {
    compileSdk 32

    defaultConfig {
        applicationId "com.wink.plugin.a"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    // 将插件的资源ID分区改为和宿主0x7F不同的值
    aaptOptions {
        additionalParameters "--package-id", "0x7E", "--allow-reserved-package-id"
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.5.0'
    compileOnly project(':wink')
    compileOnly project(':plugin-common')
}

task copyInfo() {
    doLast {
        def infoFile = file("info.json")
        def outDir = file(project.buildDir.path + "/outputs/apk/debug/")
        if (!infoFile.exists()) throw new GradleException('请在项目插件目录下创建info.json文件')
        copy {
            from infoFile
            into outDir
        }
    }
}
task zipPlugin(type: Zip) {
    archiveName rootProject.buildDir.path + "/plugin-debug.zip"
    from(file("${project.buildDir.path}/outputs/apk/debug").listFiles()) {
        exclude 'output-metadata.json'
        exclude '*.zip'
    }
}

// 构建插件
task buildPlugin(group: 'plugin') {
    dependsOn copyInfo, ':app:plugina:assembleDebug', zipPlugin
    doLast {
        def file = file(rootProject.buildDir.path + "/plugin-debug.zip")
        if (!file.exists()) {
            throw new GradleException('插件包不存在')
        }
        exec {
            commandLine 'cmd.exe', "/c", "adb.exe push ${file.path} /sdcard/Android/data/com.wink.app/cache/plugin/download/"
        }
    }
}

